/*

Weapon - Sniper Rifle

A powerful single-shot rifle with a scope.

Unlike the other weapons, this has a chamber that needs each round reloaded
manually, to compensate for the strength of the weapon.

*/

actor ccSniperRifle : ccBallistic {
	// Text Info
	Tag "$WT_SNIPERRIFLE"
	//Obituary ""
	
	// Sounds
	//Weapon.UpSound "sound"
	//Weapon.ReadySound "sound"
	//AttackSound "weapons/dspistol"

	// States
	States {
		// Spawn Placement
		Spawn:
			PIST A -1
			Stop
		// Weapon Selection
		/*
		This is the set of startup actions when selecting the weapon.
		*/
		Select:
			Goto StartSelect
		PrepWeapon:
			// Apply weapon's weight.
			TNT1 A 0 A_GiveInventory("WeaponWeight", 25)
			// Swapping from another weapon to this weapon.
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom2X_m", 1, "PrepMode.Zoom2X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom3X_m", 1, "PrepMode.Zoom3X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom4X_m", 1, "PrepMode.Zoom4X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom5X_m", 1, "PrepMode.Zoom5X")
			// Starting a map with this weapon.
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom2X", 1, "CheckWeaponChamber")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom3X", 1, "CheckWeaponChamber")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom4X", 1, "CheckWeaponChamber")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom5X", 1, "CheckWeaponChamber")
			// If the player never had the gun yet, give this weapon's default mode.
			ASRF A 0 A_GiveInventory("ccSniperRifle_Zoom2X", 1)
			Goto CheckWeaponChamber
		// Mode Preparation
		/*
		This turns the weapon's mode in memory into the active weapon mode on the HUD.
		*/
		PrepMode.Zoom2X:
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom2X_m", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom2X", 1)
			Goto CheckWeaponChamber
		PrepMode.Zoom3X:
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom3X_m", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom3X", 1)
			Goto CheckWeaponChamber
		PrepMode.Zoom4X:
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom4X_m", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom4X", 1)
			Goto CheckWeaponChamber
		PrepMode.Zoom5X:
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom5X_m", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom5X", 1)
			Goto CheckWeaponChamber
		// Ammo Loading
		/*
		This brings all the ammo from both the weapon itself and the type,
		into the "current weapon" and "current reserve" slots to read how
		much ammo is available for the gun.
		*/
		CheckWeaponChamber:
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Chamber", 1, "LoadChamber")
			Goto CheckWeaponReserve
		LoadChamber:
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Chamber", 1)
			TNT1 A 0 A_GiveInventory("Current_Chamber", 1)
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Chamber", 1, "LoadChamber")
			Goto CheckWeaponChamber
		CheckWeaponReserve:
			ASRF A 0 A_JumpIfInventory("bullet_large", 1, "LoadReserve")
			Goto PostSelect	
		LoadReserve:
			TNT1 A 0 A_TakeInventory("bullet_large", 1)
			TNT1 A 0 A_GiveInventory("Current_Reserve", 1)
			TNT1 A 0 A_JumpIfInventory("bullet_large", 1, "LoadReserve")
			Goto CheckWeaponReserve
		// Active Weapon
		/*
		The weapon is now active. Run the routines necessary.
		*/
		Ready:
			ASRF A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWZOOM)
			Goto CheckReady
		AmmoReady:
			ASRF A 0 A_JumpIfInventory("Current_Chamber", 2, "LimitChamber")
			ASRF A 0 A_JumpIfInventory("Current_Reserve", 401, "LimitReserve")
			ASRF A 0 A_JumpIfInventory("bullet_large", 1, "PushReserve")
			Goto Ready
		// Push Reserve Ammo
		/*
		When collecting ammo for this active weapon, make sure all of its
		related ammo in reserve gets pushed to the "current reserve" so the
		player can see how much ammo total of that type.
		*/
		PushReserve:
			TNT1 A 0 A_TakeInventory("bullet_large", 1)
			Goto InsertReserve
		// Deactivate Weapon
		/*
		When the user puts down the weapon for another, run the routines that
		pack away all the ammo appropriately, set the weapon mode to memory,
		and finally end use of the weapon. This works like a reverse of
		bringing the weapon up.
		*/
		Deselect:
			TNT1 A 0 A_ZoomFactor(1.0)
			Goto CheckCurrentMode
		CheckCurrentMode:
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom2X", 1, "UndoMode.Zoom2X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom3X", 1, "UndoMode.Zoom3X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom4X", 1, "UndoMode.Zoom4X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom5X", 1, "UndoMode.Zoom5X")
			Stop
		// Mode Memory
		/*
		Remember the mode the gun had before putting away, and keep the tag
		name out of the HUD.
		*/
		UndoMode.Zoom2X:
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom2X", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom2X_m", 1)
			Goto CheckCurrentChamber
		UndoMode.Zoom3X:
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom3X", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom3X_m", 1)
			Goto CheckCurrentChamber
		UndoMode.Zoom4X:
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom4X", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom4X_m", 1)
			Goto CheckCurrentChamber
		UndoMode.Zoom5X:
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom5X", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom5X_m", 1)
			Goto CheckCurrentChamber
		// Unload Ammo
		/*
		Put the ammo out of the "current weapon" into the weapon's own chamber,
		and the reserve ammo back to its storage.
		*/
		UnloadChamber:
			TNT1 A 0 A_TakeInventory("Current_Chamber", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Chamber", 1)
			TNT1 A 0 A_JumpIfInventory("Current_Chamber", 1, "UnloadChamber")
			Goto CheckCurrentChamber
		UnloadReserve:
			TNT1 A 0 A_TakeInventory("Current_Reserve", 1)
			TNT1 A 0 A_GiveInventory("bullet_large", 1)
			ASRF A 0 A_JumpIfInventory("Current_Reserve", 1, "UnloadReserve")
			Goto PostDeselect
			
		// Weapon Zooming
		Zoom:
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom2X", 1, "Zoom.Z2X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom3X", 1, "Zoom.Z3X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom4X", 1, "Zoom.Z4X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom5X", 1, "Zoom.Z5X")
			Goto Ready
		Zoom.Z2X:
			TNT1 A 0 A_ZoomFactor(2.0)
			Goto Ready
		Zoom.Z3X:
			TNT1 A 0 A_ZoomFactor(3.0)
			Goto Ready
		Zoom.Z4X:
			TNT1 A 0 A_ZoomFactor(4.0)
			Goto Ready
		Zoom.Z5X:
			TNT1 A 0 A_ZoomFactor(5.0)
			Goto Ready
			
			
		// Toggle Firing Modes
		AltFire:
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom2X", 1, "Toggle.toZoom3X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom3X", 1, "Toggle.toZoom4X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom4X", 1, "Toggle.toZoom5X")
			TNT1 A 0 A_JumpIfInventory("ccSniperRifle_Zoom5X", 1, "Toggle.toZoom2X")
			Stop
		Toggle.toZoom2X:
			ASRF A 1 Offset(0,35)
			ASRF A 1 Offset(0,38)
			ASRF A 1 Offset(0,44)
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom5X", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom2X", 1)
			TNT1 A 0 A_PlaySound("weapons/sshotl")
			ASRF A 1 Offset(0,44)
			ASRF A 1 Offset(0,38)
			ASRF A 1 Offset(0,35)
			TNT1 A 0 A_Print("2X Zoom")
			Goto Ready
		Toggle.toZoom3X:
			ASRF A 1 Offset(0,35)
			ASRF A 1 Offset(0,38)
			ASRF A 1 Offset(0,44)
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom2X", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom3X", 1)
			TNT1 A 0 A_PlaySound("weapons/sshotl")
			ASRF A 1 Offset(0,44)
			ASRF A 1 Offset(0,38)
			ASRF A 1 Offset(0,35)
			TNT1 A 0 A_Print("3X Zoom")
			Goto Ready
		Toggle.toZoom4X:
			ASRF A 1 Offset(0,35)
			ASRF A 1 Offset(0,38)
			ASRF A 1 Offset(0,44)
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom3X", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom4X", 1)
			TNT1 A 0 A_PlaySound("weapons/sshotl")
			ASRF A 1 Offset(0,44)
			ASRF A 1 Offset(0,38)
			ASRF A 1 Offset(0,35)
			TNT1 A 0 A_Print("4X Zoom")
			Goto Ready
		Toggle.toZoom5X:
			ASRF A 1 Offset(0,35)
			ASRF A 1 Offset(0,38)
			ASRF A 1 Offset(0,44)
			TNT1 A 0 A_TakeInventory("ccSniperRifle_Zoom4X", 1)
			TNT1 A 0 A_GiveInventory("ccSniperRifle_Zoom5X", 1)
			TNT1 A 0 A_PlaySound("weapons/sshotl")
			ASRF A 1 Offset(0,44)
			ASRF A 1 Offset(0,38)
			ASRF A 1 Offset(0,35)
			TNT1 A 0 A_Print("5X Zoom")
			Goto Ready
			
		// Firing Mode Actions
		Fire:
			TNT1 A 0 A_JumpIfNoAmmo("DryFire")
			ASRF B 1 A_GunFlash
			TNT1 A 0 A_PlaySound("weapons/shotgf")
			ASRF A 0 A_FireCustomMissile("bullet_large_p_sniper", FRandom(-0.05, 0.05), true, 0, 0, false, FRandom(-0.05, 0.05))
			ASRF A 0 A_SpawnItemEx("gunsmoke", 20, 0, 15, 1, 0, 0.5, 0)
			ASRF A 0 Offset(0,38)
			ASRF A 0 Offset(0,35)
			ASRF A 1 A_SetPitch(pitch-1)
			ASRF AA 1 A_SetPitch(pitch+0.25)
			ASRF AA 1 A_SetPitch(pitch+0.25)
			ASRF A 15
			ASRF A 2 Offset(0,35)
			ASRF A 2 Offset(0,40)
			ASRF A 2 Offset(0,50)
			ASRF A 1 Offset(0,60) 
			ASRF A 3 Offset(0,70) A_SpawnItemEx("largebrass", 20, 3, 15, 0, FRandom(2.0, 5.0), FRandom(1.0, 2.0), 0)
			ASRF A 0 
			ASRF A 1 Offset(0,60)
			ASRF A 2 Offset(0,50)
			ASRF A 2 Offset(0,40)
			ASRF A 2 Offset(0,35)
			ASRF A 2
			Goto Ready
			
		// Weapon Reload
		Reload:
			ASRF A 0 A_JumpIfInventory("Current_Chamber", 1, "Ready")
			ASRF A 0 A_JumpIfInventory("Current_Reserve", 1, "StartReload")
			Goto Ready
		StartReload:
			Goto Reload.WeaponDown
		LoopReload:
			TNT1 A 0 A_TakeInventory("Current_Reserve", 1)
			TNT1 A 0 A_GiveInventory("Current_Chamber", 1)
			TNT1 A 0 A_JumpIfInventory("Current_Chamber", 1, "FinishReload")
			TNT1 A 0 A_JumpIfInventory("Current_Reserve", 1, "LoopReload")
			Goto FinishReload
		FinishReload:
			TNT1 A 11
			ASRF A 0
			Goto Reload.WeaponUp
	}
}



// Weapon Modes
/*
These are abstract actors native to the weapon, to allow multiple
firing modes.
*/
actor ccSniperRifle_Zoom2X : Inventory {
	Tag "$WMT_SNIPERRIFLE_ZOOM2X"
	Inventory.MaxAmount 1
	+INVENTORY.INVBAR
}
actor ccSniperRifle_Zoom3X : Inventory {
	Tag "$WMT_SNIPERRIFLE_ZOOM3X"
	Inventory.MaxAmount 1
	+INVENTORY.INVBAR
}
actor ccSniperRifle_Zoom4X : Inventory {
	Tag "$WMT_SNIPERRIFLE_ZOOM4X"
	Inventory.MaxAmount 1
	+INVENTORY.INVBAR
}
actor ccSniperRifle_Zoom5X : Inventory {
	Tag "$WMT_SNIPERRIFLE_ZOOM5X"
	Inventory.MaxAmount 1
	+INVENTORY.INVBAR
}



// Weapon Modes - Memory
/*
These are here so the system "remembers" what setting the gun had,
without writing the Tag on the HUD.
*/
actor ccSniperRifle_Zoom2X_m : Inventory {
	Inventory.MaxAmount 1
	+INVENTORY.PERSISTENTPOWER
}
actor ccSniperRifle_Zoom3X_m : Inventory {
	Inventory.MaxAmount 1
	+INVENTORY.PERSISTENTPOWER
}
actor ccSniperRifle_Zoom4X_m : Inventory {
	Inventory.MaxAmount 1
	+INVENTORY.PERSISTENTPOWER
}
actor ccSniperRifle_Zoom5X_m : Inventory {
	Inventory.MaxAmount 1
	+INVENTORY.PERSISTENTPOWER
}



// Weapon Chamber
/*
This is the ammunition inside the gun, so the game remembers how
much was in it when pulling it out again.
*/
actor ccSniperRifle_Chamber : Ammo {
	Inventory.MaxAmount 1
}





// Weapon-Swap Spawn
/*
This is the spawn object of the weapon.
*/
actor ccSniperRiflePickup : ccWeaponPickup 11302 {
	/*
	This is the amount of ammo the pickup provides when picked up.
	*/
	Accuracy 3
	
	/*
	Identifies this actor class and derived classes as the named pickup.
	This property needs to match the actor class's name.
	*/
	Species "ccSniperRiflePickup"

	/*
	This is the name printed on the HUD when using pickup.
	It also displays in the pickup message.
	*/
	Tag "$WT_SNIPERRIFLE"

	States {
		Spawn:
			SNPR Z 0
			Goto Init
	}
}